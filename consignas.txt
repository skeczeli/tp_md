Un reporte corto en formato PDF que incluya:

- Una explicación de las decisiones tomadas respecto a la representación del grafo y el algoritmo aplicado, justificando por qué estas opciones son adecuadas para resolver el problema.
  
- Ejemplos detallados de la ejecución de los algoritmos en casos concretos, explicando paso a paso el proceso de resolución.
  
- Resultados de pruebas de performance usando la herramienta `timeit`: incluyan pruebas comparativas en grafos de diferentes tamaños y densidades (por ejemplo, grafos pequeños de hasta 10 nodos, medianos de 50 a 100 nodos y grandes de 500 a 1000 nodos o más, si el tiempo de ejecución lo permite).

  - Reporten los tiempos de ejecución.
  - Analicen el comportamiento del algoritmo en términos de eficiencia, identificando su complejidad temporal y espacial en función del tamaño del grafo.
  - Describan las limitaciones observadas en la implementación y sugieran posibles optimizaciones o variantes para mejorar la performance, si fuera necesario.

---

usamos listas de adyacencia porque es disperso.

- encontrar los caminos más cortos entre dos usuarios
done-ish (check code para ver de entenderlo y eficiencia. Testear?)
shortest_path

- identificar usuarios y conexiones críticas para la conectividad de la red: 
Usuarios críticos: por parámetro. Te dicen “este es crítico”. Los guardamos en una lista.
Conexiones críticas (bridges): si desaparecen, hay gran reducción en alcance para usuarios críticos.
Un método que busque conexiones críticas para un usuario crítico dado. Devuelve una lista de aristas. El alcance se define como la cantidad de usuarios conectados (indirectamente o no) a cierto usuario. Usamos el algoritmo de Tarjan. O(V + E)
getBridges te da los puentes.

- Esto incluye analizar el impacto en la red si alguno de estos usuarios o conexiones desaparece.
Perder un usuario crítico: ??
Perder conexiones: bridgeImpact te da el impact de perder UN puente para UN usuario. get_bridges_and_impact te da el impact para UN usuario

