from graph import AdjacencyListGraph 
g = AdjacencyListGraph()
g.add_vertex('A', True)
g.add_vertex('B')
g.add_vertex('C')
g.add_vertex('D')
g.add_vertex('E')
g.add_vertex('F')
g.add_vertex('G')
g.add_vertex('H')
g.add_vertex('I')
g.add_vertex('J')
g.add_vertex('K')
g.add_edge('A', 'B')
g.add_edge('A', 'C')
g.add_edge('B', 'D')
g.add_edge('D', 'E')
g.add_edge('E', 'C')
g.add_edge('C', 'F')
g.add_edge('F', 'G')
g.add_edge('G', 'H')
g.add_edge('G', 'I')
g.add_edge('J', 'I')
#g.add_edge('F', 'I')
g.add_edge('H', 'J')
puentes = g.get_bridges()
print(puentes)
puente_1 = puentes[0]
user = 'B'
kept, lost = g.bridge_impact(user, puente_1)
print(kept, lost)
print(f"Sin {puente_1}, {user} perderÃ­a el {(lost / (lost + kept))*100}% de alcance")
print(g.get_bridges_and_impacts(user))
# adaptar para que mire loss percentage based on user given